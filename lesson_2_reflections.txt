What happens when you initialize a repository? Why do you need to do it?

    .git gets created when a repository is initialized. We need to do that in order to include files to and make a Git repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area holds the files that will be committed to the Git repository with the next commit. Staging area helps to keep just the files related to the logical change for the upcoming commit, which offers less chances of error.

How can you use the staging area to make sure you have one commit per logical change?

	Move to staging area just the files that need to be picked up for the upcoming logical change commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	We create branches when we want to make a logical change to the master code for another audience, say, which means we want a copy of the master code to serve another purpose. Branches help in making commits to code for a sole purpose, without changing the master purpose.

How do the diagrams help you visualize the branch structure?

	The graph shows us the different branches created and the parent of a node. It also helps to indicate where the HEAD is with regard to other branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When we merge two branches the code changes made in the branches will be merged into one place. It keeps the HEAD pointing to the latest code so that any further changes will access the latest set of changes.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Pros: its quicker to merge 2 versions when done automatically
	Cons: automatic merge can not resolve conflicts that arise when a portion of the code has been updated by two developers. In this case a manual intervention is required to first resolve the conflict and 